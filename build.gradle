ext {
  WPILib_version = '2017.3.1'
  OpenCV_version = '3.1.0'
  NetworkTables_version = '3.1.7'
  CameraServer_version = '1.0.2'
  CTREToolsuite_version = '5.0.2.1'
  GSON_version = '2.8.2'

  RoboRIO_target = 'roborio-5499-frc.local'
  RoboRIO_user = 'admin'

  MainClass = 'org.team5499.robots.frc2017.Robot'
}

apply plugin: 'java'

sourceSets.main.java.srcDirs = ['src']

repositories {
  mavenCentral()
  maven {
    url 'http://first.wpi.edu/FRC/roborio/maven/release'
  }
  maven {
    url 'http://dev.imjac.in/maven'
  }
}

dependencies {
  compile "edu.wpi.first.wpilibj:athena:$WPILib_version"
  compile "org.opencv:opencv-java:$OpenCV_version"
  compile "edu.wpi.first.wpilib.networktables.java:NetworkTables:$NetworkTables_version:arm"
  compile "edu.wpi.cscore.java:cscore:$CameraServer_version:arm"
  compile "thirdparty.frc.ctre:Toolsuite-Java:$CTREToolsuite_version"
  compile "com.google.code.gson:gson:$GSON_version"

  runtime "edu.wpi.first.wpilib:athena-runtime:$WPILib_version"
  runtime "edu.wpi.first.wpilibj:athena-jni:$WPILib_version"
  runtime "org.opencv:opencv-natives:$OpenCV_version:linux-arm"
  runtime "org.opencv:opencv-jni:$OpenCV_version:linux-arm"
  runtime "edu.wpi.cscore.java:cscore:$CameraServer_version:athena-uberzip@zip"
  runtime "thirdparty.frc.ctre:Toolsuite-Zip:$CTREToolsuite_version@zip"
}

jar {
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  manifest {
    attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
    attributes 'Robot-Class': "$MainClass"
  }
}

task runtimeLibraries {
  doLast {
    configurations.runtime.asFileTree.each { lib ->
      copy {
        from zipTree(lib)
        into getTemporaryDir().toPath().resolve('runtimeLibraries')
        include '**/*.so*'
        includeEmptyDirs = false
        eachFile { details ->
          details.setRelativePath(new RelativePath(true, details.getName()))
        }
      }
    }
  }
}

task zipLibraries(type: Zip, dependsOn: runtimeLibraries) {
  from runtimeLibraries.getTemporaryDir().toPath().resolve('runtimeLibraries')
  into file('lib')
  include '*.*'
  archiveName 'lib.zip'
  destinationDir(getTemporaryDir().toPath().resolve('lib_zip').toFile())
  eachFile { details ->
     details.setRelativePath(new RelativePath(true, details.getName()))
  }
}
   
task deploy {
  dependsOn build
  dependsOn zipLibraries
  doLast {
    println zipLibraries.getTemporaryDir().toPath().resolve('lib_zip').toAbsolutePath().toString() + "/lib.zip"
    exec {
      commandLine 'curl'
      args '-u', 'team5499:5499', '-T', zipLibraries.getTemporaryDir().toPath().resolve('lib_zip').toAbsolutePath().toString() + "/lib.zip", 'ftp://roborio-5499-frc.local:5801/'
    }
    exec {
      commandLine 'curl'
      args '-u', 'team5499:5499', '-T', jar.archivePath, 'ftp://roborio-5499-frc.local:5801/'
    }
    exec {
      commandLine 'curl'
      args '-d', 'action=deploy', 'http://roborio-5499-frc.local:5800'
    }
  }
}

// DO NOT USE -- STILL UNDER DEVELOPMENT

task zipDashboard(type: Zip) {
  from file('./')
  into file('SmartDashboard')
  include 'SmartDashboard/'
  archiveName 'SmartDashboard.zip'
  destinationDir(file('./SmartDashboard_new/'))
  //THIS HAS TO CHANGE TO PREVENT FROM FLATTENING THE DIRECTORY STRUCTURE
  eachFile { details ->
     details.setRelativePath(new RelativePath(true, details.getName()))
  }
}

task deploy_dashboard {
  dependsOn zipDashboard
  doLast {
    exec {
      commandLine 'curl'
      args '-u', 'team5499:5499', '-T', getTemporaryDir().toPath().resolve('zip_dir') + '/SmartDashboard.zip', 'ftp://roborio-5499-frc.local:5801/'
    }
    exec {
      commandLine 'curl'
      args '-d', 'action=dashboard', 'http://roborio-5499-frc.local:5800'
    }
  }
}

//--------------------------------------------------------------